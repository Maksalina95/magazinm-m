// üìÑ config.js –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω –¥–æ app.js
// const appUrl = ${baseUrl}/Sheet1

const productListEl = document.getElementById('product-list');
const searchInputEl = document.getElementById('searchInput');
const autoListEl = document.getElementById('autocompleteList');
const filtersEl = document.getElementById('filters');

let productListData = [];

// üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ JSON
fetch(appUrl)
  .then(res => res.json())
  .then(data => {
    productListData = data.filter(item => item.—Ñ–æ—Ç–æ && item.–Ω–∞–∑–≤–∞–Ω–∏–µ && item.—Ü–µ–Ω–∞);
    showProducts(productListData);
    setupAutocomplete(productListData);
    updateFilters(productListData);
  })
  .catch(err => {
    if (productListEl) productListEl.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.</p>';
    console.error(err);
  });

// üß± –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
function showProducts(list) {
  if (!productListEl) return;
  productListEl.innerHTML = '';
  list.forEach(item => {
    const el = document.createElement('div');
    el.className = 'product-card';
    el.innerHTML = `
      ${item.–≤–∏–¥–µ–æ 
        ? <video controls src="${item.–≤–∏–¥–µ–æ}"></video> 
        : <img src="${item.—Ñ–æ—Ç–æ}" alt="${item.–Ω–∞–∑–≤–∞–Ω–∏–µ}" />}
      <h3>${item.–Ω–∞–∑–≤–∞–Ω–∏–µ}</h3>
      ${item.–æ–ø–∏—Å–∞–Ω–∏–µ ? <p>${item.–æ–ø–∏—Å–∞–Ω–∏–µ}</p> : ''}
      <strong>${item.—Ü–µ–Ω–∞} ‚ÇΩ</strong>
      <div class="card-buttons">
        <a href="https://wa.me/79376280080" target="_blank">WhatsApp</a>
        <button class="fav-btn" onclick="toggleFavorite('${item.–Ω–∞–∑–≤–∞–Ω–∏–µ}')">‚≠ê</button>
      </div>
    `;
    productListEl.appendChild(el);
  });
}

// üîç –ü–æ–∏—Å–∫
if (searchInputEl) {
  searchInputEl.addEventListener('input', () => {
    const term = searchInputEl.value.toLowerCase();
    const filtered = productListData.filter(p => p.–Ω–∞–∑–≤–∞–Ω–∏–µ.toLowerCase().includes(term));
    filtersEl.style.display = term ? 'flex' : 'none';
    showProducts(filtered);
  });
}

// üí° –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
function setupAutocomplete(list) {
  if (!autoListEl) return;
  autoListEl.innerHTML = '';
  list.forEach(p => {
    const opt = document.createElement('option');
    opt.value = p.–Ω–∞–∑–≤–∞–Ω–∏–µ;
    autoListEl.appendChild(opt);
  });
}

// üéØ –§–∏–ª—å—Ç—Ä—ã
const filterSelects = document.querySelectorAll('#filters select, #filters input[type=number]');
filterSelects.forEach(sel => sel.addEventListener('input', applyFilters));

function applyFilters() {
  let result = [...productListData];
  filterSelects.forEach(sel => {
    const id = sel.id.replace('filter-', '');
    const val = sel.value.toLowerCase();
    if (val && val !== '–≤—Å–µ') {
      result = result.filter(p => (p[id] || '').toLowerCase().includes(val));
    }
  });

  const min = parseFloat(document.getElementById('filter-price-min')?.value || 0);
  const max = parseFloat(document.getElementById('filter-price-max')?.value || 999999);
  result = result.filter(p => {
    const price = parseFloat(p.—Ü–µ–Ω–∞);
    return !isNaN(price) && price >= min && price <= max;
  });

  showProducts(result);
}

// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function updateFilters(data) {
  const fields = ['–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Ä–∞–∑–¥–µ–ª', '–±—Ä–µ–Ω–¥', '—Å—Ç—Ä–∞–Ω–∞', '—Ç–∏–ø'];
  fields.forEach(field => {
    const select = document.getElementById(filter-${field});
    if (!select) return;
    const unique = [...new Set(data.map(item => item[field]).filter(Boolean))];
    unique.forEach(val => {
      const opt = document.createElement('option');
      opt.value = val;
      opt.textContent = val;
      select.appendChild(opt);
    });
  });
}

// ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
function toggleFavorite(name) {
  let favs = JSON.parse(localStorage.getItem('favorites') || '[]');
  if (favs.includes(name)) {
    favs = favs.filter(n => n !== name);
  } else {
    favs.push(name);
  }
  localStorage.setItem('favorites', JSON.stringify(favs));
}
